{"version":3,"sources":["components/Navbar.jsx","components/Card.jsx","components/MemoryGame.jsx","components/App.jsx","index.js"],"names":["Navbar","react_default","a","createElement","Component","Card","_this","this","display","props","isShow","id","style","backgroundColor","color","className","onClick","e","handleCardClick","MemoryGame","cards","map","card","i","components_Card","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","generateHexColor","rand","Math","floor","random","toString","padStart","concat","generateColorSet","colors","Set","size","state","numCards","add","setState","generateCards","toConsumableArray","shuffleArray","assign","curColor","array","temporaryValue","randomIndex","currentIndex","length","clickedCard","Number","target","parentNode","setTimeout","filter","forEach","rgb","hex","x","parseInt","slice","match","components_Navbar","components_MemoryGame","ReactDOM","render","components_App","document","getElementById"],"mappings":"kQASeA,0LAJX,OAASC,EAAAC,EAAAC,cAAA,uCAFQC,cCYNC,0LAVJ,IAAAC,EAAAC,KACDC,GAAgC,IAAtBD,KAAKE,MAAMC,OAAmB,OAAS,cACvD,OACET,EAAAC,EAAAC,cAAA,OAAKQ,GAAIJ,KAAKE,MAAME,GAAIC,MAAO,CAACC,gBAAiBN,KAAKE,MAAMK,OAAQC,UAAU,iBAAiBC,QAAS,SAACC,GAAD,OAAOX,EAAKG,MAAMS,gBAAgBD,KACxIhB,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACC,gBAAiBL,GAAUO,UAAU,yBANvCX,cCqBJe,0LAnBJ,IAAAb,EAAAC,KACP,OACEN,EAAAC,EAAAC,cAAA,OAAKY,UAAU,iBAAiBJ,GAAG,QAChCJ,KAAKE,MAAMW,MAAMC,IAAI,SAACC,EAAMC,GAAP,OAEpBtB,EAAAC,EAAAC,cAACqB,EAAD,CACEN,gBAAiBZ,EAAKG,MAAMS,gBAC5BJ,MAAOQ,EAAKR,MACZW,IAAKF,EACLZ,GAAIY,EACJb,OAAQY,EAAKZ,mBAXAN,cC2HVsB,qBAzHb,SAAAA,EAAYjB,GAAO,IAAAH,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAApB,KAAAmB,IACjBpB,EAAAqB,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAxB,KAAME,KASRuB,iBAAmB,WAEjB,IAAMC,EAAOC,KAAKC,MAAsB,SAAhBD,KAAKE,UAC1BC,SAAS,IACTC,SAAS,EAAG,KACf,UAAAC,OAAWN,IAfM3B,EAkBnBkC,iBAAmB,WAIjB,IAFA,IAAMC,EAAS,IAAIC,IAEZD,EAAOE,KAAOrC,EAAKsC,MAAMC,UAAU,CACxC,IAAI/B,EAAQR,EAAK0B,mBACjBS,EAAOK,IAAIhC,GAGb,OADAR,EAAKyC,SAAS,CAAEN,WACTA,GA3BUnC,EA8BnB0C,cAAgB,WACd1C,EAAKkC,mBACL,IAAIpB,EAAQO,OAAAsB,EAAA,EAAAtB,CAAIrB,EAAKsC,MAAMH,QAAQpB,IAAI,SAAAP,GACrC,MAAO,CACLA,QACAJ,QAAQ,KAIZU,GADAA,EAAQd,EAAK4C,aAALvB,OAAAsB,EAAA,EAAAtB,CAAsBP,GAAtBmB,OAAAZ,OAAAsB,EAAA,EAAAtB,CAAgCP,MAC1BC,IAAI,SAAAC,GAAI,OAAIK,OAAOwB,OAAO,GAAI7B,KAC5ChB,EAAKyC,SAAS,CAAE3B,UAChBd,EAAKyC,SAAS,CAAEK,SAAU,MAzCT9C,EA6CnB4C,aAAe,SAAAG,GAMb,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcrB,KAAKC,MAAMD,KAAKE,SAAWoB,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GA9DU/C,EA0EnBY,gBAAkB,SAAAD,GAChB,IAAMmC,EAAW9C,EAAKsC,MAAMQ,SACtBhC,EAAQO,OAAAsB,EAAA,EAAAtB,CAAIrB,EAAKsC,MAAMxB,OAAOC,IAAI,SAAAC,GAAI,OAAIK,OAAOwB,OAAO,GAAI7B,KAC5DoC,EAActC,EAAMuC,OAAO1C,EAAE2C,OAAOC,WAAWlD,KAErD+C,EAAYhD,QAAUgD,EAAYhD,OAClCJ,EAAKyC,SAAS,CAAE3B,UACC,KAAbgC,EACF9C,EAAKyC,SAAS,CAAEK,SAAUM,EAAY5C,QAEtCgD,WAAW,WACLJ,EAAY5C,QAAUsC,EACxB9C,EAAKyC,SAAS,CAAEK,SAAU,MAE1BhC,EACG2C,OACC,SAAAzC,GAAI,OACFA,EAAKR,QAAUsC,GAAY9B,EAAKR,QAAU4C,EAAY5C,QAEzDkD,QAAQ,SAAS1C,GAChBA,EAAKZ,QAAS,IAElBJ,EAAKyC,SAAS,CAAE3B,UAChBd,EAAKyC,SAAS,CAAEK,SAAU,OAE3B,MAjGL9C,EAAKsC,MAAQ,CACXC,SAAU,GACVJ,OAAQ,IAAIC,IACZtB,MAAO,GACPgC,SAAU,IANK9C,uEAkEX2D,GAEN,SAASC,EAAIC,GACX,OAAQ,IAAMC,SAASD,GAAG9B,SAAS,KAAKgC,OAAO,GAEjD,MAAO,IAAMH,GAJbD,EAAMA,EAAIK,MAAM,qCAIK,IAAMJ,EAAID,EAAI,IAAMC,EAAID,EAAI,qCAiCjD,OACEhE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACbd,EAAAC,EAAAC,cAACoE,EAAD,MACAtE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,gBAAgBC,QAAST,KAAKyC,eAAhD,eAIF/C,EAAAC,EAAAC,cAACqE,EAAD,CACEtD,gBAAiBX,KAAKW,gBACtBE,MAAOb,KAAKqC,MAAMxB,gBAnHVhB,cCDlBqE,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.11378554.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"../styles/Navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() { \r\n    return ( <h3>This is the NAVBAR</h3> );\r\n  }\r\n}\r\n \r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport \"../styles/Card.css\";\r\n\r\nclass Card extends Component {\r\n\r\n  render() {\r\n    const display = this.props.isShow === false ? \"#ccc\" : \"transparent\";\r\n    return (\r\n      <div id={this.props.id} style={{backgroundColor: this.props.color}} className=\"card-container\" onClick={(e) => this.props.handleCardClick(e)}>\r\n        <div style={{backgroundColor: display}} className=\"card-overlay\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from \"./Card.jsx\";\r\nimport \"../styles/MemoryGame.css\";\r\n\r\nclass MemoryGame extends Component {\r\n  render() { \r\n    return (\r\n      <div className=\"game-container\" id=\"game\">\r\n        {this.props.cards.map((card, i) => (\r\n\r\n          <Card\r\n            handleCardClick={this.props.handleCardClick}\r\n            color={card.color}\r\n            key={i}\r\n            id={i}\r\n            isShow={card.isShow}\r\n          />\r\n          \r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemoryGame;","import React, { Component } from \"react\";\r\nimport Navbar from \"./Navbar.jsx\";\r\nimport MemoryGame from \"./MemoryGame.jsx\";\r\nimport \"../styles/App.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numCards: 20,\r\n      colors: new Set(),\r\n      cards: [],\r\n      curColor: \"\"\r\n    };\r\n  }\r\n\r\n  generateHexColor = () => {\r\n    // Generate number from min to max in hex\r\n    const rand = Math.floor(Math.random() * 16777215)\r\n      .toString(16)\r\n      .padStart(6, \"0\");\r\n    return `#${rand}`;\r\n  };\r\n\r\n  generateColorSet = () => {\r\n    // Copiyng set\r\n    const colors = new Set();\r\n    // Generating colors and adding, using a while to prevent repetitive colors\r\n    while (colors.size < this.state.numCards) {\r\n      let color = this.generateHexColor();\r\n      colors.add(color);\r\n    }\r\n    this.setState({ colors });\r\n    return colors;\r\n  };\r\n\r\n  generateCards = () => {\r\n    this.generateColorSet();\r\n    let cards = [...this.state.colors].map(color => {\r\n      return {\r\n        color,\r\n        isShow: false\r\n      };\r\n    });\r\n    cards = this.shuffleArray([...cards, ...cards]);\r\n    cards = cards.map(card => Object.assign({}, card));\r\n    this.setState({ cards });\r\n    this.setState({ curColor: \"\" });\r\n  };\r\n\r\n  // https://bit.ly/2gMXijX <- picked from this stack question\r\n  shuffleArray = array => {\r\n    let currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  // https://bit.ly/2NPsaKV\r\n  rgb2hex(rgb) {\r\n    rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\r\n    function hex(x) {\r\n      return (\"0\" + parseInt(x).toString(16)).slice(-2);\r\n    }\r\n    return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\r\n  }\r\n\r\n  handleCardClick = e => {\r\n    const curColor = this.state.curColor;\r\n    const cards = [...this.state.cards].map(card => Object.assign({}, card));\r\n    const clickedCard = cards[Number(e.target.parentNode.id)];\r\n    // Showing card clicked\r\n    clickedCard.isShow = !clickedCard.isShow;\r\n    this.setState({ cards });\r\n    if (curColor === \"\") {\r\n      this.setState({ curColor: clickedCard.color });\r\n    } else {\r\n      setTimeout(() => {\r\n        if (clickedCard.color === curColor) {\r\n          this.setState({ curColor: \"\" });\r\n        } else {\r\n          cards\r\n            .filter(\r\n              card =>\r\n                card.color === curColor || card.color === clickedCard.color\r\n            )\r\n            .forEach(function(card) {\r\n              card.isShow = false;\r\n            });\r\n          this.setState({ cards });\r\n          this.setState({ curColor: \"\" });\r\n        }\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar />\r\n        <div className=\"game-menu\">\r\n          <button className=\"btn btn-start\" onClick={this.generateCards}>\r\n            Start Game\r\n          </button>\r\n        </div>\r\n        <MemoryGame\r\n          handleCardClick={this.handleCardClick}\r\n          cards={this.state.cards}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App.jsx';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}